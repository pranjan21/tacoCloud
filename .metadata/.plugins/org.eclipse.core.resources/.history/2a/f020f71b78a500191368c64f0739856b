package tacos.web;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import tacos.data.IngredientRepository;
import tacos.data.TacoRepository;
import tacos.domains.Ingredient;
import tacos.domains.Ingredient.Type;
import tacos.domains.Order;
import tacos.domains.Taco;

@Controller
@RequestMapping("/design")
@SessionAttributes("order")
public class DesignTacoController {

	private final IngredientRepository ingredientRepo;
	private final TacoRepository tacoRepo;
	
	public DesignTacoController(IngredientRepository ingredientRepo, TacoRepository tacoRepo) {
		this.ingredientRepo = ingredientRepo;
		this.tacoRepo = tacoRepo;
	}
	
	@ModelAttribute(name = "order")
	public Order oder() {
		return new Order();
	}

	@ModelAttribute
	public void getIngredients(Model model) {
		
		List<Ingredient> ingredients = (List<Ingredient>) this.ingredientRepo.findAll();
	
		Type[] types = Ingredient.Type.values();
		
		
		for (Type type: types) {
			model.addAttribute(type.toString().toLowerCase(), 
					filterByType(ingredients, type) );
		}
	}

	@GetMapping
	public String showDesignForm(Model model) {
		model.addAttribute("taco", new Taco("el tacazo"));
		return "design";
	}

	 @PostMapping
	 public String processDesign(
			 @Valid Taco taco, 
			 Errors errors,
			 @ModelAttribute Order order) {
		 if (errors.hasErrors()) {
			 return "design";
		 }
//		 Taco saved = tacoRepo.save(taco);
//		 order.addTaco(saved);
		 
		 System.out.print(taco.getIngredients().toString());
		 return "redirect:/orders/current";
	 }


	private List<Ingredient> filterByType(
			List<Ingredient> ingredients, Type type) {
		return ingredients
				.stream()
				.filter(x -> x.getType().equals(type))
				.collect(Collectors.toList());
	}

}
