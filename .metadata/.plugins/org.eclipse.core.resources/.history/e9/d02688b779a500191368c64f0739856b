package tacos.data;

import java.sql.Timestamp;
import java.sql.Types;
import java.util.Arrays;
import java.util.Date;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import tacos.domains.Ingredient;
import tacos.domains.Taco;

@Repository
public class JdbcTacoRepository implements TacoRepository {

	private JdbcTemplate jdbcTemplate;
	
	public JdbcTacoRepository(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	@Override
	public Taco save(Taco taco) {

		long id = saveTacoInfo(taco);
		taco.setId(id);
		for (Ingredient ingredient : taco.getIngredients()) {
			this.saveIngredientToTaco(taco, ingredient);
		}
		
		return taco;
	}

	private long saveTacoInfo(Taco taco) {
		
		taco.setCreatedAt(new Date());
		PreparedStatementCreator psc =
				new PreparedStatementCreatorFactory(
						"insert into Taco (name, createdAt) values (?, ?)",
						Types.VARCHAR, Types.TIMESTAMP
						).newPreparedStatementCreator(
								Arrays.asList(
										taco.getName(),
										new Timestamp(taco.getCreatedAt().getTime())));
		KeyHolder keyHolder = new GeneratedKeyHolder();
		this.jdbcTemplate.update(psc, keyHolder);
		
		return keyHolder.getKey().longValue();
	}

	private void saveIngredientToTaco(Taco taco, Ingredient ingredient) {
		this.jdbcTemplate.update("insert into Taco_Ingredients (taco, ingredient) values (?,?)", taco.getId(), ((Taco) ingredient).getId());
	}
}
